"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var types_1 = require("./types");
var Request_1 = require("./Request");
var MyBot = (function () {
    function MyBot(token) {
        var _this = this;
        this.update = function (serverCount) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!serverCount || typeof serverCount !== "number")
                            throw new Error('서버 수가 주어지지 않았거나, 올바르지 않은 타입입니다.');
                        return [4, Request_1["default"]('/bots/servers', {
                                method: 'POST',
                                headers: {
                                    token: this.token,
                                    'Content-Type': 'application/json'
                                },
                                body: "{\"servers\": " + serverCount + "}"
                            })];
                    case 1:
                        res = _a.sent();
                        if (res.code !== 200)
                            throw new Error(typeof res.message === 'string' ? res.message : "\uC62C\uBC14\uB974\uC9C0 \uC54A\uC740 \uC751\uB2F5\uC774 \uBC18\uD658\uB418\uC5C8\uC2B5\uB2C8\uB2E4.\n\uC751\uB2F5: " + JSON.stringify(res));
                        else {
                            this.lastUpdate = new Date();
                            return [2, res];
                        }
                        return [2];
                }
            });
        }); };
        this.checkVote = function (id) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!id || typeof id !== "string")
                            throw new Error('아이디가 주어지지 않았거나, 올바르지 않은 아이디입니다!');
                        return [4, Request_1["default"]('/bots/voted/' + id, {
                                method: 'GET',
                                headers: {
                                    token: this.token,
                                    'Content-Type': 'application/json'
                                }
                            })];
                    case 1:
                        res = _a.sent();
                        if (res.code !== 200)
                            throw new Error(typeof res.message === 'string' ? res.message : "\uC62C\uBC14\uB974\uC9C0 \uC54A\uC740 \uC751\uB2F5\uC774 \uBC18\uD658\uB418\uC5C8\uC2B5\uB2C8\uB2E4.\n\uC751\uB2F5: " + JSON.stringify(res));
                        else
                            return [2, res];
                        return [2];
                }
            });
        }); };
        if (!token || typeof token !== "string")
            throw new Error('올바른 토큰을 입력해주세요!');
        this.lastUpdate;
        this.token = token;
    }
    return MyBot;
}());
exports.MyBot = MyBot;
var Bots = {
    get: function (page) {
        if (page === void 0) { page = 1; }
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof page !== "number")
                            throw new Error('올바르지 않은 페이지입니다.');
                        return [4, Request_1["default"]('/bots/get?page=' + page)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    },
    getByID: function (id) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!id)
                        throw new Error('아이디를 입력해주세요!');
                    if (typeof id !== "string")
                        throw new Error('올바르지 않은 아이디입니다.');
                    return [4, Request_1["default"]('/bots/get/' + id)];
                case 1: return [2, _a.sent()];
            }
        });
    }); },
    search: function (query, page) {
        if (page === void 0) { page = 1; }
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!query)
                            throw new Error('쿼리 텍스트가 요구됩니다!');
                        if (typeof page !== "number")
                            throw new Error('올바르지 않은 페이지입니다.');
                        return [4, Request_1["default"]("/bots/search?q=" + query + "&page=" + page)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    },
    category: function (category, page) {
        if (page === void 0) { page = 1; }
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!category)
                            throw new Error('카테고리가 요구됩니다!');
                        if (!Object.values(types_1.Category).includes(category))
                            throw new Error('올바르지 않은 카테고리입니다.');
                        if (typeof page !== "number")
                            throw new Error('올바르지 않은 페이지입니다.');
                        return [4, Request_1["default"]("/bots/category/" + category + "?page=" + page)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    }
};
exports.Bots = Bots;
//# sourceMappingURL=index.js.map